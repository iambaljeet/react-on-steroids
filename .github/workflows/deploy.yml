name: 🚀 Deploy to GitHub Pages

# This workflow deploys your Next.js app to GitHub Pages
# It can be triggered manually from the Actions tab
on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: false
        default: 'info'
        type: choice
        options:
          - info
          - debug

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect package manager
        id: detect-package-manager
        run: |
          echo "📦 Detecting package manager..."
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "✅ Detected: Yarn"
          elif [ -f "${{ github.workspace }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "✅ Detected: NPM"
          elif [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
            echo "✅ Detected: PNPM"
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "⚠️ No lock file found, defaulting to NPM"
          fi

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: 🛠️ Setup pnpm (if needed)
        if: steps.detect-package-manager.outputs.manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: ⚙️ Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: 📦 Install dependencies
        run: |
          echo "📥 Installing dependencies with ${{ steps.detect-package-manager.outputs.manager }}..."
          ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
          echo "✅ Dependencies installed successfully"

      - name: 🔨 Build Next.js application
        run: |
          echo "🏗️ Building Next.js application..."
          ${{ steps.detect-package-manager.outputs.runner }} next build
          echo "✅ Build completed successfully"
        env:
          NODE_ENV: production

      - name: 📄 Create .nojekyll file
        run: |
          echo "📝 Creating .nojekyll file to prevent GitHub Pages from processing with Jekyll..."
          touch ./out/.nojekyll
          echo "✅ .nojekyll file created"

      - name: 📊 Build summary
        run: |
          echo "### 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Package Manager | ${{ steps.detect-package-manager.outputs.manager }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟢 Node Version | 20 |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌿 Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 Triggered by | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    name: 🚀 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🌐 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎊 Deployment summary
        run: |
          echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your application has been deployed to GitHub Pages! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. 🌐 Visit your deployed site" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔍 Test all features and pages" >> $GITHUB_STEP_SUMMARY
          echo "3. 📱 Check responsive design on different devices" >> $GITHUB_STEP_SUMMARY
          echo "4. 🐛 Report any issues if found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✨ Happy browsing!" >> $GITHUB_STEP_SUMMARY
